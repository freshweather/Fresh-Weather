# bot.py
import logging
import os
import json
from datetime import datetime
from threading import Lock

import requests
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# ========== –ù–∞—Å—Ç—Ä–æ–π–ö–ê ==========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise SystemExit("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¢—É–ª—ã
LAT, LON = 54.1920, 37.6175
TIMEZONE = "Europe/Moscow"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ —á–∞—Ç—É
STORE_FILE = "last_forecasts.json"
_store_lock = Lock()

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# ========== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ==========
btn_weather = KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞ –≤ –¢—É–ª–µ")
btn_refresh = KeyboardButton("üîÅ –û–±–Ω–æ–≤–∏—Ç—å")
btn_last = KeyboardButton("üïò –ü–æ—Å–ª–µ–¥–Ω–µ–µ")
main_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_weather).add(btn_refresh, btn_last)

def make_inline_kb():
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="day:0"),
        InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="day:1")
    )
    kb.add(InlineKeyboardButton("üîÅ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh"))
    return kb

# ========== –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ weathercode ==========
WEATHER_CODES = {
    0: "–Ø—Å–Ω–æ", 1: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ", 2: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å", 3: "–ü–∞—Å–º—É—Ä–Ω–æ",
    45: "–¢—É–º–∞–Ω", 48: "–ò–∑–º–æ—Ä–æ–∑—å", 51: "–ú–æ—Ä–æ—Å—å –ª—ë–≥–∫–∞—è", 53: "–ú–æ—Ä–æ—Å—å", 55: "–ú–æ—Ä–æ—Å—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è",
    61: "–î–æ–∂–¥—å –ª—ë–≥–∫–∏–π", 63: "–î–æ–∂–¥—å", 65: "–î–æ–∂–¥—å —Å–∏–ª—å–Ω—ã–π", 71: "–°–Ω–µ–≥ –ª—ë–≥–∫–∏–π", 73: "–°–Ω–µ–≥",
    75: "–°–Ω–µ–≥ —Å–∏–ª—å–Ω—ã–π", 80: "–õ–∏–≤–Ω–∏ –ª—ë–≥–∫–∏–µ", 81: "–õ–∏–≤–Ω–∏", 82: "–õ–∏–≤–Ω–∏ —Å–∏–ª—å–Ω—ã–µ",
    95: "–ì—Ä–æ–∑–∞", 96: "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º", 99: "–ì—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –≥—Ä–∞–¥–æ–º"
}

# ========== –†–∞–±–æ—Ç–∞ —Å Open-Meteo ==========
def get_weather():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (daily) —É open-meteo."""
    url = "https://api.open-meteo.com/v1/forecast"
    params = {
        "latitude": LAT,
        "longitude": LON,
        "daily": "temperature_2m_max,temperature_2m_min,precipitation_sum,weathercode,windspeed_10m_max",
        "timezone": TIMEZONE
    }
    r = requests.get(url, params=params, timeout=10)
    r.raise_for_status()
    return r.json()

def _format_temp(val):
    try:
        return f"{val:+.0f}¬∞C"
    except Exception:
        return "‚Äî"

def _build_day_block_from_daily(daily, idx, label):
    """
    daily ‚Äî —ç—Ç–æ dict –∫–∞–∫ –∏–∑ open-meteo daily
    idx ‚Äî –∏–Ω–¥–µ–∫—Å –¥–Ω—è (0 –¥–ª—è —Å–µ–≥–æ–¥–Ω—è, 1 –¥–ª—è –∑–∞–≤—Ç—Ä–∞)
    """
    dates = daily.get("time", [])
    tmax = daily.get("temperature_2m_max", [])
    tmin = daily.get("temperature_2m_min", [])
    precip = daily.get("precipitation_sum", [])
    wcode = daily.get("weathercode", [])
    wind = daily.get("windspeed_10m_max", [])

    if idx >= len(dates):
        return f"*{label}*\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n"

    # –¥–∞—Ç–∞
    try:
        date_str = datetime.strptime(dates[idx], "%Y-%m-%d").strftime("%d.%m.%Y")
    except Exception:
        date_str = dates[idx]

    desc = WEATHER_CODES.get(wcode[idx], "‚Äî") if idx < len(wcode) else "‚Äî"
    tmax_val = _format_temp(tmax[idx]) if idx < len(tmax) else "‚Äî"
    tmin_val = _format_temp(tmin[idx]) if idx < len(tmin) else "‚Äî"
    precip_val = f"{precip[idx]} –º–º" if idx < len(precip) else "‚Äî"
    wind_val = f"{wind[idx]} –º/—Å" if idx < len(wind) else "‚Äî"

    return (
        f"*{label} ‚Äî {date_str}*\n"
        f"{desc}\n"
        f"–ú–∞–∫—Å: {tmax_val}, –º–∏–Ω: {tmin_val}\n"
        f"–û—Å–∞–¥–∫–∏: {precip_val}\n"
        f"–í–µ—Ç–µ—Ä: {wind_val}\n"
    )

def build_full_forecast_message(api_data):
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç (—Å–µ–≥–æ–¥–Ω—è + –∑–∞–≤—Ç—Ä–∞) –∏–∑ –æ—Ç–≤–µ—Ç–∞ API."""
    daily = api_data.get("daily", {})
    today = _build_day_block_from_daily(daily, 0, "–°–µ–≥–æ–¥–Ω—è")
    tomorrow = _build_day_block_from_daily(daily, 1, "–ó–∞–≤—Ç—Ä–∞")
    return today + "\n" + tomorrow + f"\n\n–î–∞–Ω–Ω—ã–µ: Open-Meteo.com"

# ========== –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä—Å–∏—Å—Ç (JSON) ==========
def _load_store():
    if not os.path.exists(STORE_FILE):
        return {}
    try:
        with open(STORE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª store, –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
        return {}

def _save_store(store):
    try:
        with open(STORE_FILE, "w", encoding="utf-8") as f:
            json.dump(store, f, ensure_ascii=False, indent=2)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª store.")

def save_last_forecast(chat_id: int, api_data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (–ø–æ chat_id) ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ daily –∏ —Ç–µ–∫—Å—Ç."""
    with _store_lock:
        store = _load_store()
        daily = api_data.get("daily", {})
        text = build_full_forecast_message(api_data)
        store[str(chat_id)] = {
            "ts": datetime.utcnow().isoformat() + "Z",
            "daily": daily,
            "text": text
        }
        _save_store(store)

def get_last_forecast(chat_id: int):
    with _store_lock:
        store = _load_store()
        return store.get(str(chat_id))

# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–∏—Å—ã–ª–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –¢—É–ª–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /weather."
    )
    await message.answer(text, reply_markup=main_kb)

@dp.message_handler(commands=["weather"])
async def cmd_weather(message: types.Message):
    await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
    try:
        api_data = get_weather()
        save_last_forecast(message.chat.id, api_data)
        text = build_full_forecast_message(api_data)
        await message.answer(text, parse_mode="Markdown", reply_markup=main_kb, reply_markup_inline := None)
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—á—Ç–æ–±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–ª–∞—Å—å –≤–∏–¥–∏–º–æ–π)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=make_inline_kb())
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–∫–æ–º–∞–Ω–¥–∞ /weather)")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "üå§ –ü–æ–≥–æ–¥–∞ –≤ –¢—É–ª–µ")
async def btn_weather_handler(message: types.Message):
    # –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ /weather
    await cmd_weather(message)

@dp.message_handler(lambda m: m.text == "üîÅ –û–±–Ω–æ–≤–∏—Ç—å")
async def btn_refresh_handler(message: types.Message):
    await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
    try:
        api_data = get_weather()
        save_last_forecast(message.chat.id, api_data)
        text = build_full_forecast_message(api_data)
        await message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ:\n\n" + text, parse_mode="Markdown", reply_markup=main_kb)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=make_inline_kb())
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–∫–Ω–æ–ø–∫–∞ –û–±–Ω–æ–≤–∏—Ç—å)")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "üïò –ü–æ—Å–ª–µ–¥–Ω–µ–µ")
async def btn_last_handler(message: types.Message):
    last = get_last_forecast(message.chat.id)
    if last:
        ts = last.get("ts", "‚Äî")
        text = last.get("text", "‚Äî")
        await message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ: {ts}\n\n" + text, parse_mode="Markdown", reply_markup=main_kb)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=make_inline_kb())
    else:
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –ù–∞–∂–º–∏ ¬´üå§ –ü–æ–≥–æ–¥–∞ –≤ –¢—É–ª–µ¬ª —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑.", reply_markup=main_kb)

# ========== Callback queries (inline buttons) ==========
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("day:"))
async def cb_day_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)  # —É–±–∏—Ä–∞–µ–º –∫—Ä—É–∂–æ—á–µ–∫ –æ–∂–∏–¥–∞–Ω–∏—è
    chat_id = callback_query.message.chat.id
    _, idx_str = callback_query.data.split(":", 1)
    try:
        idx = int(idx_str)
    except Exception:
        await bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞.")
        return

    last = get_last_forecast(chat_id)
    if last:
        daily = last.get("daily", {})
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π –±–ª–æ–∫
        block = _build_day_block_from_daily(daily, idx, "–°–µ–≥–æ–¥–Ω—è" if idx == 0 else "–ó–∞–≤—Ç—Ä–∞")
        await bot.send_message(chat_id, block, parse_mode="Markdown", reply_markup=main_kb)
    else:
        # –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ ‚Äî –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
        try:
            api_data = get_weather()
            save_last_forecast(chat_id, api_data)
            daily = api_data.get("daily", {})
            block = _build_day_block_from_daily(daily, idx, "–°–µ–≥–æ–¥–Ω—è" if idx == 0 else "–ó–∞–≤—Ç—Ä–∞")
            await bot.send_message(chat_id, block, parse_mode="Markdown", reply_markup=main_kb)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è callback day")
            await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.", reply_markup=main_kb)

@dp.callback_query_handler(lambda c: c.data == "refresh")
async def cb_refresh(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    chat_id = callback_query.message.chat.id
    try:
        api_data = get_weather()
        save_last_forecast(chat_id, api_data)
        text = build_full_forecast_message(api_data)
        await bot.send_message(chat_id, "–û–±–Ω–æ–≤–ª–µ–Ω–æ:\n\n" + text, parse_mode="Markdown", reply_markup=main_kb)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è callback refresh")
        await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.", reply_markup=main_kb)

@dp.message_handler()
async def fallback(message: types.Message):
    """–§–æ–ª–ª–±–µ–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    await message.answer("–ù–∞–ø–∏—à–∏ /weather –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.", reply_markup=main_kb)

# ========== –ó–∞–ø—É—Å–∫ ==========
if __name__ == "__main__":
    logger.info("Bot started")
    executor.start_polling(dp, skip_updates=True)
